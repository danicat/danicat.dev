name: Check for Missing Translations

on:
  push:
    branches:
      - main

jobs:
  check_translations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Find files needing translation
        id: find_files
        run: |
          # Get changed files in the last push
          # Comparing HEAD with the previous commit
          changed_files=$(git diff --name-only HEAD^1 HEAD)

          # Array to hold files that need translation
          files_to_translate=()

          # Supported language codes (can be extended)
          languages=("pt-br")

          echo "Checking for modified index.md files..."
          for file in $changed_files; do
            if [[ "$file" == */index.md ]]; then
              dir=$(dirname "$file")
              base=$(basename "$file" .md)
              echo "Found modified markdown index: $file"

              for lang in "${languages[@]}"; do
                translated_file="$dir/${base}.${lang}.md"
                # Check if the translated file was NOT part of this push
                if ! echo "$changed_files" | grep -q "$translated_file"; then
                  # Check if the translated file exists
                  if [[ -f "$translated_file" ]]; then
                    # If it exists, we assume it needs an update
                    echo "$translated_file needs to be updated."
                    files_to_translate+=("- $translated_file (outdated)")
                  else
                    # If it doesn't exist, it needs to be created
                    echo "$translated_file needs to be created."
                    files_to_translate+=("- $translated_file (missing)")
                  fi
                else
                  echo "Translated file $translated_file was also updated in this push. Skipping."
                fi
              done
            fi
          done

          if [ ${#files_to_translate[@]} -gt 0 ]; then
            echo "Found files needing translation."
            # Using a heredoc for multiline strings
            body=$(cat <<EOF
The following files need to be created or updated:
${files_to_translate[@]}
EOF
            )
            # Escape newlines for the output
            body="${body//'%'/'%25'}"
            body="${body//$'
'/'%0A'}"
            body="${body//$''/'%0D'}"
            echo "body=$body" >> $GITHUB_OUTPUT
            echo "needs_issue=true" >> $GITHUB_OUTPUT
          else
            echo "No translations needed."
            echo "needs_issue=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Create GitHub Issue
        if: steps.find_files.outputs.needs_issue == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          gh issue create \
            --title "Translation Update Required" \
            --body "${{ steps.find_files.outputs.body }}" \
            --label "jules"
